import React, { useState, useEffect } from 'react';
import { 
  Modal, 
  Form, 
  Input, 
  message, 
  Button, 
  Select, 
  Tag, 
  Row, 
  Col,
  Card,
  Spin
} from 'antd';
import { 
  PlusOutlined, 
  UserOutlined,
  MailOutlined,
  PhoneOutlined,
  BarcodeOutlined,
  TagsOutlined,
  BankOutlined
} from '@ant-design/icons';
import { createCustomer } from '../../services/CustomerService';
import SystemService from '../../services/SystemService';

const { Option } = Select;

const CreateCustomerModal = ({ visible, onCancel, onSuccess }) => {
  const [form] = Form.useForm();
  const [loading, setLoading] = useState(false);
  const [loadingMaCty, setLoadingMaCty] = useState(false);
  const [availableMaCty, setAvailableMaCty] = useState([]);
  const [selectedItems, setSelectedItems] = useState([]);
  const [newItem, setNewItem] = useState('');

  useEffect(() => {
    if (visible) {
      fetchMaCtyOptions();
      form.resetFields();
      setSelectedItems([]);
      setNewItem('');
    }
  }, [visible, form]);

  const fetchMaCtyOptions = async () => {
    try {
      setLoadingMaCty(true);
      const response = await SystemService.getFixedCost();
      
      // X·ª≠ l√Ω response tr·ª±c ti·∫øp v√¨ API tr·∫£ v·ªÅ object ch·ª©a maCty array
      if (response && response.maCty && Array.isArray(response.maCty)) {
        setAvailableMaCty(response.maCty);
      } else {
        console.warn('Kh√¥ng t√¨m th·∫•y maCty trong response:', response);
        setAvailableMaCty([]);
      }
    } catch (error) {
      console.error('Error fetching maCty options:', error);
      message.error('L·ªói khi t·∫£i danh s√°ch m√£ c√¥ng ty');
      setAvailableMaCty([]);
    } finally {
      setLoadingMaCty(false);
    }
  };

  const handleSubmit = async () => {
    try {
      setLoading(true);
      const values = await form.validateFields();
      
      const customerData = {
        ...values,
        items: selectedItems
      };
      
      await createCustomer(customerData);
      message.success('T·∫°o kh√°ch h√†ng th√†nh c√¥ng');
      onSuccess();
    } catch (error) {
      if (error.errorFields) {
        message.error('Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin');
      } else {
        message.error('L·ªói khi t·∫°o kh√°ch h√†ng');
      }
    } finally {
      setLoading(false);
    }
  };

  const handleAddItem = () => {
    if (newItem.trim() && !selectedItems.includes(newItem.trim())) {
      setSelectedItems([...selectedItems, newItem.trim()]);
      setNewItem('');
    } else if (selectedItems.includes(newItem.trim())) {
      message.warning('M·∫∑t h√†ng n√†y ƒë√£ t·ªìn t·∫°i');
    }
  };

  const handleRemoveItem = (itemToRemove) => {
    setSelectedItems(selectedItems.filter(item => item !== itemToRemove));
  };

  return (
    <Modal
      title={
        <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
          <UserOutlined style={{ color: '#1890ff' }} />
          <span>Th√™m kh√°ch h√†ng m·ªõi</span>
        </div>
      }
      open={visible}
      onCancel={onCancel}
      width={800}
      footer={[
        <Button key="cancel" onClick={onCancel}>
          H·ªßy
        </Button>,
        <Button
          key="submit"
          type="primary"
          loading={loading}
          onClick={handleSubmit}
        >
          T·∫°o kh√°ch h√†ng
        </Button>,
      ]}
    >
      <Form form={form} layout="vertical">
        {/* Th√¥ng tin c∆° b·∫£n */}
        <Card size="small" title="Th√¥ng tin c∆° b·∫£n" style={{ marginBottom: 16 }}>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label="T√™n ƒë·∫ßy ƒë·ªß"
                name="name"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß' }]}
              >
                <Input 
                  placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß kh√°ch h√†ng" 
                  prefix={<UserOutlined />}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label="T√™n vi·∫øt t·∫Øt"
                name="shortName"
                rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n vi·∫øt t·∫Øt' }]}
              >
                <Input 
                  placeholder="Nh·∫≠p t√™n vi·∫øt t·∫Øt" 
                  prefix={<TagsOutlined />}
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            label="M√£ kh√°ch h√†ng"
            name="customerCode"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√£ kh√°ch h√†ng' }]}
          >
            <Input 
              placeholder="Nh·∫≠p m√£ kh√°ch h√†ng duy nh·∫•t" 
              prefix={<BarcodeOutlined />}
            />
          </Form.Item>
        </Card>

        {/* Th√¥ng tin li√™n h·ªá */}
        <Card size="small" title="Th√¥ng tin li√™n h·ªá" style={{ marginBottom: 16 }}>
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                label="Email"
                name="email"
                rules={[
                  { type: 'email', message: 'Email kh√¥ng h·ª£p l·ªá' }
                ]}
              >
                <Input 
                  placeholder="Nh·∫≠p email kh√°ch h√†ng" 
                  prefix={<MailOutlined />}
                />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                label="S·ªë ƒëi·ªán tho·∫°i"
                name="phone"
              >
                <Input 
                  placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i" 
                  prefix={<PhoneOutlined />}
                />
              </Form.Item>
            </Col>
          </Row>
        </Card>

        {/* M√£ c√¥ng ty */}
        <Card 
          size="small" 
          title={
            <div style={{ display: 'flex', alignItems: 'center', gap: 8 }}>
              <BankOutlined style={{ color: '#1890ff' }} />
              <span>M√£ c√¥ng ty</span>
              {loadingMaCty && <Spin size="small" />}
            </div>
          } 
          style={{ marginBottom: 16 }}
        >
          <Form.Item
            label="Ch·ªçn m√£ c√¥ng ty"
            name="maCty"
            help="Ch·ªçn m·ªôt ho·∫∑c nhi·ªÅu m√£ c√¥ng ty m√† kh√°ch h√†ng thu·ªôc v·ªÅ"
          >
            <Select
              mode="multiple"
              placeholder={loadingMaCty ? "ƒêang t·∫£i danh s√°ch m√£ c√¥ng ty..." : "Ch·ªçn c√°c m√£ c√¥ng ty"}
              loading={loadingMaCty}
              disabled={loadingMaCty}
              allowClear
              showSearch
              filterOption={(input, option) =>
                option.value.toLowerCase().includes(input.toLowerCase())
              }
              notFoundContent={loadingMaCty ? <Spin size="small" /> : 'Kh√¥ng t√¨m th·∫•y m√£ c√¥ng ty'}
            >
              {availableMaCty.map(ma => (
                <Option key={ma} value={ma}>
                  <div style={{ display: 'flex', alignItems: 'center' }}>
                    <BankOutlined style={{ marginRight: 8, color: '#1890ff' }} />
                    <span style={{ fontWeight: 500 }}>{ma}</span>
                  </div>
                </Option>
              ))}
            </Select>
          </Form.Item>
          
          {/* Hi·ªÉn th·ªã th·ªëng k√™ m√£ c√¥ng ty */}
          {availableMaCty.length > 0 && (
            <div style={{ 
              fontSize: 12, 
              color: '#666', 
              marginTop: 8,
              padding: 8,
              backgroundColor: '#f5f5f5',
              borderRadius: 4
            }}>
              üìä C√≥ {availableMaCty.length} m√£ c√¥ng ty kh·∫£ d·ª•ng: {availableMaCty.join(', ')}
            </div>
          )}
        </Card>

        {/* M·∫∑t h√†ng */}
        <Card size="small" title="Danh s√°ch m·∫∑t h√†ng">
          <Form.Item label="Th√™m m·∫∑t h√†ng m·ªõi">
            <Row gutter={8}>
              <Col flex="auto">
                <Input
                  placeholder="Nh·∫≠p t√™n m·∫∑t h√†ng"
                  value={newItem}
                  onChange={(e) => setNewItem(e.target.value)}
                  onPressEnter={handleAddItem}
                />
              </Col>
              <Col>
                <Button 
                  type="primary" 
                  icon={<PlusOutlined />}
                  onClick={handleAddItem}
                  disabled={!newItem.trim()}
                >
                  Th√™m
                </Button>
              </Col>
            </Row>
          </Form.Item>

          {selectedItems.length > 0 && (
            <Form.Item label="C√°c m·∫∑t h√†ng ƒë√£ th√™m">
              <div style={{ 
                border: '1px solid #d9d9d9', 
                borderRadius: 6, 
                padding: 8,
                minHeight: 40,
                maxHeight: 120,
                overflowY: 'auto',
                backgroundColor: '#fafafa'
              }}>
                {selectedItems.map((item, index) => (
                  <Tag
                    key={index}
                    closable
                    onClose={() => handleRemoveItem(item)}
                    style={{ marginBottom: 4 }}
                    color="green"
                  >
                    <TagsOutlined style={{ marginRight: 4 }} />
                    {item}
                  </Tag>
                ))}
              </div>
            </Form.Item>
          )}
        </Card>
      </Form>
    </Modal>
  );
};

export default CreateCustomerModal;
